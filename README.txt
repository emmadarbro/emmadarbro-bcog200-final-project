# emmadarbro-bcog200-final-project
## Final Project for BCOG 200: Emma Darbro
### Final Project Summary 5/10/2024: For this project, I have created a modified dating app, but for people to find friends, through a survey-based approach that analyzes certain features like the location, height, and behaviors of potential matches. This project then returns a compatability score based off of the user's ranking of importance (the weights from user input) and the deviations of scores from stored, potential profiles from their own responses. For user questions where they are asked to denote a range, these range values are calculates into numbers from both the user profiles and the stored profiles. The differences between the user values and the stored profile values for a given 'attribute' are then multiplied b ythe user' importance' rating to generate the summed compatability score for each respective profile. The other stored profiles are  pre-set and weighted for each response attribute and category.

2.) Functions and Descriptions:
2a.) def store_profile(): function to allow the profile user to put in their own integer scores for age, height, and perceived attriactiveness, as well as ranges for perceived extroversion, sociability, desired income, family connectedness, etc. the user also quanitifies how important each of these respective attributes would be in this function, which are paired stored with each variable key for calculations latter
2b.) def convert_range_to_number(value): this function takes the range values from survey questions with range values and converts them from a letter a/b/c to a number 1/2/3. These numbers are then stored an used in calculating the absolute vale differences across categories between stored profiles and user inputs.
2c.) def compute_similarity(initial_profiles, user_profiles): function would allow for the absolute value differences amongst user input and pre-set profiles for each respective caterogyr key to be calculated and multiplied by each of the importance value weights for that key that the user input. A compatibility score would be returned later in the main function, and the lower the score, the closer the profile is to what the user is looking for!

3-4.) project will be completed independently 

UPDATES/REVISION FOR 3/28 PROJECT CHECKIN:
Overview of material provided to users:
Users of this pseudo dating app alogrithm will answer a series of survey question that pertain to themselves and are integer-based. This algorithm of matching will be primarily based on similarities, and the difference between the responses of the user ansd the profiles in the repository will be calculate for each survey question. I will then use a rendition of the Multi-Utility Atrribute Theorum (MUAT) that is often used for decision making for optimal choices, and requires both attributes, attribute score, and importance of attributes. In this project, the attributes will be extracted from the survey question (family closeness, age, distance, height, income), and their importance will be self reported from the user in the second batch of the survey questions. The attribute "score" will be calculated based on difference of values between responses from the user and the profile directory since this algorith matches based off of similarity. In short, the closest profile match would have a score of "0". The maximum score is essential infinite since there is only one question that has a bounded range for which the answers will lie.

Functions Used:
2a.) def store_profile(user): function to allow the profile user to put in their own (interger) scores for age, height, perceived attractiveness, location, etc that aim to investigate values in partners that would otherwise not easilly be quantified if asked in a qualitative measure (full question list on the test_file). These questions are used as a metric of matching profile choices and hte most matched profile will have scores that deviate the least in a sum fashion. The ideal matches, even for categories that are weighted very high, are those with the lowest scores of difference.
2b.) def rank_importance(profile_categories): function would allow the profile user to rank the importance of each given category in the person/people they are being matched with. This will allow for categories to be weighted with multipliers to compute a compatibility score that is output at the end of the function execution.
2c.) def compute_difference(profile_categories, user, profiles, importance_list): function would allow for the differences amongst user input and set profiles to be calculated and multiplied by each of the importance value weights that the user input. A compatibility score would be returned (which is rather the differences between the two profiles, so we want these to be low), and the lower the score, the closer the profile is to what the user is looking for. Some of these framing pieces are a bit unituitive but it will all be outlined clearly for the user so they know how to interpret their score.
Structure of data:
Data will be structured as integers, but it may be easiest to use pandas and DataFrames to store the data since I am already familiar with those. Variable names will be included for each survery question and importance weight, and all of those questions will have their variables stored in congruence with their key words to avoid confusions. The differences between each survey question must FIRST be computed, and THEN the scores can be multipilied, but they must occur in that order.

